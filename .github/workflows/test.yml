name: Stakgraph Test
on:
  pull_request:
    branches:
      - main

jobs:
  run-test:
    runs-on: ubuntu-latest
    name: Run Test on Stakgraph
    steps:
      - name: Enable docker.host.internal for Ubuntu
        run: |
          pwd && sudo bash -c 'echo "172.17.0.1 host.docker.internal" >> /etc/hosts'

      - name: Checkout from Github
        uses: actions/checkout@v4

      - name: Give Permission
        working-directory: ./mcp
        run: |
          mkdir -p ./.neo4j/plugins
          sudo chown -R 1000:1000 ./.neo4j/plugins
          sudo chmod -R 777 ./.neo4j/plugins  
          sudo chmod -R 777 ./conf

      - name: Run Neo4j
        working-directory: ./mcp
        run: docker compose -f neo4j.yaml up -d

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.1"

      - name: Verify Go Installation
        run: go version

      - name: Install gopls
        run: go install golang.org/x/tools/gopls@latest

      - name: Verify gopls Installation
        run: |
          echo "$HOME/go/bin" >> $GITHUB_PATH
          gopls version

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Verify Node.js Installation
        run: node -v

      - name: Install TypeScript and TypeScript LSP
        run: |
          npm install -g typescript typescript-language-server
          echo "$HOME/.npm-global/bin" >> $GITHUB_PATH

      - name: Verify TypeScript Installation
        run: |
          tsc --version
          typescript-language-server --version

      - name: Run command LS
        run: ls

      - name: Run Env Command
        run: |
          export REPO_URL="https://github.com/stakwork/demo-repo.git"
          export LSP_SKIP_POST_CLONE=1
          OUTPUT_FORMAT=jsonl cargo run --bin urls

      - name: Wait for Neo4j to be Ready
        run: |
          echo "Waiting for Neo4j to be healthy..."
          timeout 300s sh -c '
          until docker inspect --format "{{json .State.Health.Status }}" neo4j.sphinx | grep -q "healthy"; do
            echo "Neo4j is not ready yet..."
            sleep 10
          done'
          echo "Neo4j is healthy!"

      - name: Neo4j logs
        run: docker logs neo4j.sphinx

      - name: Install Dependencies
        working-directory: ./mcp
        run: yarn install

      - name: Start Node Server
        working-directory: ./mcp
        # run: yarn run dev &
        run: yarn run dev

      # - name: Wait for the server
      #   run: npx wait-on http://localhost:3000

      # - name: Upload data
      #   run: |
      #     curl -X POST \
      #     -F "nodes=@./ast/examples/demo-repo-nodes.jsonl" \
      #     -F "edges=@./ast/examples/demo-repo-edges.jsonl" \
      #     http://localhost:3000/upload

      # - name: Test API Response
      #   run: |
      #     sleep 10
      #     RESPONSE=$(curl -s "http://localhost:3000/map?name=App&node_type=Function")
      #     echo "Response: $RESPONSE"

      #     EXPECTED='<pre>Function: App (85)'

      #     if echo "$RESPONSE" | grep -q "$EXPECTED"; then
      #       echo "Test passed: Response contains expected output."
      #     else
      #       echo "Test failed: Response does not contain expected output."
      #       exit 1
      #     fi
