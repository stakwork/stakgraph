name: Stakgraph E2E Test
on:
  pull_request:
    branches:
      - main

jobs:
  run-test:
    runs-on: ubuntu-latest
    name: Run e2e tests
    steps:
      - name: Enable docker.host.internal for Ubuntu
        run: |
          pwd && sudo bash -c 'echo "172.17.0.1 host.docker.internal" >> /etc/hosts'

      - name: Checkout from Github
        uses: actions/checkout@v4

      - name: Give Permission
        working-directory: ./mcp
        run: |
          mkdir -p ./.neo4j/plugins
          sudo chown -R 1000:1000 ./.neo4j/plugins
          sudo chmod -R 777 ./.neo4j/plugins  
          sudo chmod -R 777 ./conf

      - name: Run Neo4j
        working-directory: ./mcp
        run: docker compose -f neo4j.yaml up -d

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.1"

      - name: Verify Go Installation
        run: go version

      - name: Install gopls
        run: go install golang.org/x/tools/gopls@latest

      - name: Verify gopls Installation
        run: |
          echo "$HOME/go/bin" >> $GITHUB_PATH
          gopls version

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Verify Node.js Installation
        run: node -v

      - name: Install TypeScript and TypeScript LSP
        run: |
          npm install -g typescript typescript-language-server
          echo "$HOME/.npm-global/bin" >> $GITHUB_PATH

      - name: Verify TypeScript Installation
        run: |
          tsc --version
          typescript-language-server --version

      - name: Run Env Command
        run: |
          export REPO_URL="https://github.com/stakwork/demo-repo.git"
          export LSP_SKIP_POST_CLONE=1
          OUTPUT_FORMAT=jsonl cargo run --bin index

      - name: Wait for Neo4j to be Ready
        run: |
          echo "Waiting for Neo4j to be healthy..."
          timeout 300s sh -c '
          until docker inspect --format "{{json .State.Health.Status }}" neo4j.sphinx | grep -q "healthy"; do
            echo "Neo4j is not ready yet..."
            sleep 10
          done'
          echo "Neo4j is healthy!"

      - name: Start Node Server
        working-directory: ./mcp
        run: yarn install

      - name: Start Node Server
        working-directory: ./mcp
        run: |
          export TEST_REF_ID=1 
          yarn run dev > server.log 2>&1 & #captuere logs

      - name: Wait for the server
        run: |
          tail -n +1 -f server.log &
          npx wait-on http://localhost:3000 -t 120000

      - name: Upload data
        run: |
          curl -X POST \
          -F "nodes=@./ast/examples/demo-repo-nodes.jsonl" \
          -F "edges=@./ast/examples/demo-repo-edges.jsonl" \
          http://localhost:3000/upload

      - name: Test API Response
        working-directory: ./mcp
        run: |
          sleep 10
          curl "http://localhost:3000/map?name=App&node_type=Function" -o ./testing/actual-map-response.html

      - name: Compare actual and expected output
        working-directory: ./mcp
        run: |
          ACTUAL_MAP_FILE="./testing/actual-map-response.html"
          EXPECTED_MAP_FILE="./testing/map.html"

          if diff --color=always -u "$ACTUAL_MAP_FILE" "$EXPECTED_MAP_FILE"; then
            echo "✅ Output matches expected"
          else
            echo "❌ Output does not match expected"
            exit 1
          fi

      - name: Check Fulltext Search
        working-directory: ./mcp
        run: |
          curl -s -X GET "http://localhost:3000/search?query=NewRouter&output=snippet" -o ./testing/actual-fulltext-search.txt
          echo "$(<./testing/actual-fulltext-search.txt)"

      - name: Compare Fulltext Search Response with Expected Output
        working-directory: ./mcp
        run: |
          ACTUAL_FULLTEXT_FILE="./testing/actual-fulltext-search.txt"
          EXPECTED_FULLTEXT_FILE="./testing/fulltext-search-response.txt"

          diff -u "$ACTUAL_FULLTEXT_FILE" "$EXPECTED_FULLTEXT_FILE"

          if diff -q "$ACTUAL_FULLTEXT_FILE" "$EXPECTED_FULLTEXT_FILE"; then
            echo "Response matches expected output ✅"
          else
            echo "Response does NOT match expected output ❌"
            exit 1
          fi

      - name: Check NodeType Endpoint
        working-directory: ./mcp
        run: |
          curl -s -X GET "http://localhost:3000/nodes?node_type=Endpoint" -o ./testing/actual-nodes-nodetypes-endpoint.json
          echo "$(<./testing/actual-nodes-nodetypes-endpoint.json)"

      - name: Compare NodeType Response with Expected Output
        working-directory: ./mcp
        run: |
          ACTUAL_NODETYPE_ENDPOINT_FILE="./testing/actual-nodes-nodetypes-endpoint.json"
          EXPECTED_NODETYPE_ENDPOINT_FILE="./testing/nodes-nodetype-endpoint.json"

          SORTED_ACTUAL_NODETYPE_ENDPOINT_FILE="/tmp/sorted_actual_nodetype_endpoint.json"
          SORTED_EXPECTED_NODETYPE_ENDPOINT_FILE="/tmp/sorted_expected_nodetype_endpoint.json"

          jq --sort-keys . "$ACTUAL_NODETYPE_ENDPOINT_FILE" > "$SORTED_ACTUAL_NODETYPE_ENDPOINT_FILE"
          jq --sort-keys . "$EXPECTED_NODETYPE_ENDPOINT_FILE" > "$SORTED_EXPECTED_NODETYPE_ENDPOINT_FILE"

          if diff --color=always -u "$SORTED_EXPECTED_NODETYPE_ENDPOINT_FILE" "$SORTED_ACTUAL_NODETYPE_ENDPOINT_FILE"; then
            echo "Nodetypes Response matches expected output ✅"
          else
            echo "Nodetypes Response does NOT match expected output ❌"
            exit 1
          fi
